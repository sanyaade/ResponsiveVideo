package com.johnpolacek.media {		import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.geom.Rectangle;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.LocalConnection;	import flash.utils.Timer;	import com.johnpolacek.display.VideoDisplay;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.utils.DisplayUtils;		/**	 * VideoObject	 *	 * A Flash video player used for embedding video on a web page.	 *	 * Use swfobject to embed vidobject.swf on a web page and then pass the 	 * video url through the FlashVars param:	 *	 * <code><param name="FlashVars" value="video=video/placeholder640x360.mp4" /></code>	 *	 * @see com.johnpolacek.display.VideoDisplay	 * @see com.johnpolacek.display.VideoStreamPlayer	 * 	 * @version 	 * <b>29 Mar 2010</b> <br>	 * 	 * @author John Polacek, john@johnpolacek.com	 */	 	public class VidObject extends MovieClip	{		private static const BASE_WIDTH:int = 640;		private static const BASE_HEIGHT:int = 360;				public var trackingEnabled:Boolean = false;		public var videoURL:String;		public var video:VideoDisplay;		public var posterURL:String;				private var paramObj:Object;		private var videoAutoPlay:Boolean = false;		private var videoAutoRewind:Boolean = true;		private var aspect:Number;						public function VidObject()		{			stage.scaleMode = StageScaleMode.NO_SCALE;						// Get path to domain			var domainURL:String = "";			if (ExternalInterface.available)				domainURL += ExternalInterface.call("window.location.href.toString");			domainURL = domainURL.substring(0, domainURL.lastIndexOf("/"));			domainURL += "/";						// Get parameters and set values			var playerButtonColor:uint = 0xFFFFFF;			var playerBackgroundColor:uint = 0x111111;			var playerAccentColor:uint = 0xBBBBBB;			var enableFullScreen:Boolean = true;			if (LoaderInfo(this.root.loaderInfo)) {				paramObj = LoaderInfo(this.root.loaderInfo).parameters;				if (paramObj.video) {					videoURL = paramObj.video;					// if relative path, make absolute					if (videoURL.indexOf("http:") == -1)						videoURL = domainURL + videoURL;				}								if (paramObj.poster) 					posterURL = paramObj.poster;								if (paramObj.tracking && ExternalInterface.available)						trackingEnabled = paramObj.tracking=="true";										if (paramObj.buttonColor)					playerButtonColor = DisplayUtils.getColorCodeFromString(paramObj.buttonColor);									if (paramObj.accentColor)					playerAccentColor = DisplayUtils.getColorCodeFromString(paramObj.accentColor);								if (paramObj.backgroundColor)					playerBackgroundColor = DisplayUtils.getColorCodeFromString(paramObj.backgroundColor);									if (String(paramObj.enableFullScreen) == "false")					enableFullScreen = false;									videoAutoPlay = (String(paramObj.autoPlay) == "true");				videoAutoRewind = (String(paramObj.autoRewind) == "false");			}						// Create VideoDisplay			video = new VideoDisplay();			video.autoPlay = videoAutoPlay;			video.autoRewind = videoAutoRewind;			video.backgroundColor = playerBackgroundColor;			video.buttonColor = playerButtonColor;			video.accentColor = playerAccentColor;			video.showControls = true;			video.player.autoHideController();			video.player.enableFullScreen(enableFullScreen);			video.addEventListener(Event.COMPLETE,onVideoLoadComplete, false, 0, true);						if (videoURL)				video.loadVideo(videoURL);			if (posterURL)				video.addPoster(posterURL);			addChild(video);								video.player.addEventListener(UIEvent.PLAYBACK_START, onPlaybackStart, false, 0, true);			video.player.addEventListener(UIEvent.PLAYBACK_FINISH, onPlaybackFinish, false, 0, true);			video.player.addEventListener(UIEvent.FULL_SCREEN_CONTENT, onPlayerFullScreen);						stage.addEventListener(Event.RESIZE, onStageResize);		}				private function onPlaybackStart(event:UIEvent):void		{			if (trackingEnabled && ExternalInterface.available)				ExternalInterface.call("pageTracker._trackPageview","/"+videoURL+"/play"); 		}				private function onPlaybackFinish(event:UIEvent):void		{			if (trackingEnabled && ExternalInterface.available)				ExternalInterface.call("pageTracker._trackPageview","/"+videoURL+"/finish"); 		}				/** Repositions video to match actual width/height  */		private function onVideoLoadComplete(event:Event):void		{			if (paramObj.width) {				aspect = video.height / video.width;				video.width = paramObj.width;				video.height = video.width * aspect;			} 			this.x -= (video.width - BASE_WIDTH) / 2;			this.y -= (video.height - BASE_HEIGHT) / 2;			video.removeEventListener(Event.COMPLETE,onVideoLoadComplete);		}				private function onPlayerFullScreen(event:UIEvent):void {			if (event.value == UIEvent.FULL_SCREEN_CONTENT_ENTER) {				stage.displayState = StageDisplayState.FULL_SCREEN;			}			else {				stage.displayState = StageDisplayState.NORMAL;				var adjustSizeTimer:Timer = new Timer(200, 1);				adjustSizeTimer.addEventListener("timer", function() { updateSize(); });				adjustSizeTimer.start();			}		}				public function onStageResize(event:Event):void {			updateSize();		}				/** Scale size of video proportionally  */		public function updateSize():void {			var newScale = stage.stageWidth/BASE_WIDTH;			video.width = BASE_WIDTH * newScale;			video.scaleY = video.scaleX;			this.x = -((video.width - BASE_WIDTH) / 2);			this.y = -((video.height - BASE_HEIGHT) / 2);		}	}}