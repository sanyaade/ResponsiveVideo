package com.johnpolacek.ui {		import flash.events.MouseEvent;	import flash.display.Sprite;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.shapes.RectangleShape;	/** * Volume Control UI Component  * * @sends UIEvent.VOLUME_ADJUST # Transmits volume percentage value (from 0 to 1) on user interaction *  * @author John Polacek, john@johnpolacek.com */	 		public class VolumeControl extends Sprite {				private var container:Sprite = new Sprite();		private var volumeIcon:Sprite = new Sprite();		private var volumeBarsOn:Sprite = new Sprite();		private var volumeBarsOff:Sprite = new Sprite();		private var volumeMask:Sprite = new Sprite();		private var hotSpot:Sprite = new Sprite();				/** 		* @param w Width (in pixels) of the VolumeControl sprite		* @param h Height (in pixels) of the VolumeControl sprite		* @param backgroundColor Background color of the VolumeControl sprite. Default 0x000000		* @param buttonColor Button color of the VolumeControl sprite. Default 0xFFFFFF		*/			public function VolumeControl(w:Number, h:Number, backgroundColor:uint = 0x000000, buttonColor:uint = 0xFFFFFF, accentColor:uint = 0xFFFFFF)		{			var bgr:Sprite = new RectangleShape(w, h, backgroundColor);			var blockSize:Number = h/6;			var volumeIconSquare1:RectangleShape = new RectangleShape(blockSize, blockSize, buttonColor);			var volumeIconSquare2:RectangleShape = new RectangleShape(blockSize, blockSize * 2, buttonColor);			volumeIconSquare2.x = volumeIconSquare1.width + 2;			volumeIconSquare2.y = -blockSize/2;			volumeIcon.addChild(volumeIconSquare1);			volumeIcon.addChild(volumeIconSquare2);						for (var i:int = 0; i < 7; i++)			{				var volumeSquareOff:RectangleShape = new RectangleShape(blockSize, blockSize, buttonColor, .5);				volumeSquareOff.x = (blockSize+1)*i;				volumeBarsOff.addChild(volumeSquareOff);								var volumeSquareOn:RectangleShape = new RectangleShape(blockSize, blockSize, accentColor);				volumeSquareOn.x = (blockSize+1)*i;				volumeBarsOn.addChild(volumeSquareOn);			}						volumeMask = new RectangleShape(volumeBarsOn.width, volumeBarsOn.height);						volumeBarsOn.x = volumeBarsOff.x = volumeMask.x = blockSize * 3;			volumeBarsOn.mask = volumeMask;						addChild(bgr);			addChild(container);			container.addChild(volumeIcon);			container.addChild(volumeBarsOff);			container.addChild(volumeBarsOn);			container.addChild(volumeMask);						hotSpot = new RectangleShape(volumeBarsOn.width, h, backgroundColor, 0);			hotSpot.x = volumeBarsOn.x + (blockSize * 2.5);			container.x = (w - container.width)/2; 			container.y = (h - blockSize)/2; 						addChild(hotSpot);						hotSpot.addEventListener(MouseEvent.MOUSE_DOWN, onDown);			hotSpot.buttonMode = true;						trace("h: "+h);			trace("height: "+this.height);		}				/** Sets volume 		* @param v Volume level between 0 (mute) and 1 (max)		*/	 		public function setVolume(v:Number):void		{			if (v < 0)  				v = 0;						if (v > 1)  				v = 1;						volumeMask.scaleX = v;			dispatchEvent(new UIEvent(UIEvent.VOLUME_ADJUST, v));		}				private function onDown(event:MouseEvent):void		{			var newVolume:Number = event.localX/(hotSpot.width*.8);						if (newVolume < .2) 				newVolume = 0;						if (newVolume > .9) 				newVolume = 1;						setVolume(newVolume);		}	}}