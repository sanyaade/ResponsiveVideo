package com.johnpolacek.widgets {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.display.DisplayObject;		import com.johnpolacek.events.TrackEvent;		import com.greensock.TweenMax;/** * A class for pages that have simple tabbed navigation: * * Requires a MovieClips on the stage with instance names of nav and container. * nav contains tab buttons that are stacked in the same order as * container which contain MovieClips for each page of content * * TrackEvent is fired with instance name of selected page content assigned to label value * * @version  * <b>23 Mar 2011</b>  <br>  * * @author John Polacek, john@johnpolacek.com */	 		public class TabbedPage extends MovieClip 	{		/** A movie clip with buttons in it, 		  * must be stacked in same order as content in container. **/		public var nav:MovieClip;		/** Container for with MovieClips for each page of content,		  * must be stacked in same order as buttons in nav. **/		public var container:MovieClip = new MovieClip;				private var currTabIndex:int = 0;		private var trackingEnabled:Boolean = true;				public function TabbedPage() 		{			var i:int;						for (i = 0; i < nav.numChildren; i++)			{				nav.getChildAt(i).addEventListener(MouseEvent.MOUSE_OVER, onTabOver);			}			nav.getChildAt(0).alpha = 0;						for (i = 1; i < container.numChildren; i++)			{				container.getChildAt(i).visible = false;				container.getChildAt(i).alpha = 0;			}						sendTrackEvent();		} 				private function onTabOver(event:MouseEvent):void 		{			TweenMax.to(nav.getChildAt(currTabIndex), .25, {alpha:1});			TweenMax.to(container.getChildAt(currTabIndex), .25, {autoAlpha:0});						var button:DisplayObject = event.target as DisplayObject;			currTabIndex = nav.getChildIndex(button);			TweenMax.to(button, .25, {alpha:0});			TweenMax.to(container.getChildAt(currTabIndex), .5, {autoAlpha:1});						if (trackingEnabled)			{				TweenMax.delayedCall(1.25, sendTrackEvent);				trackingEnabled = false;			}		}				private function sendTrackEvent():void		{			dispatchEvent(new TrackEvent(TrackEvent.TRACK, "Content View", container.getChildAt(currTabIndex).name));			trackingEnabled = true;		}	}}